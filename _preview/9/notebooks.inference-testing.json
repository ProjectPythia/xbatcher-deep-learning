{"version":2,"kind":"Notebook","sha256":"8f23cf0bcb1fd8a96265450ef7c088b5a69a63963a1bcfa134a20e5dc93963e8","slug":"notebooks.inference-testing","location":"/notebooks/inference-testing.ipynb","dependencies":[],"frontmatter":{"title":"Infer model on array","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"The Project Pythia Community","given":"The Project Pythia","family":"Community"},"name":"The Project Pythia Community","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/xbatcher-deep-learning","copyright":"2024","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/xbatcher-deep-learning/blob/HEAD/notebooks/inference-testing.ipynb","exports":[{"format":"ipynb","filename":"inference-testing.ipynb","url":"/xbatcher-deep-learning/_preview/9/build/inference-testing-483c93db3186fbd6f6612bcb1bde6e59.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"inTBFXI9WK"}],"key":"wHQ1ANonhl"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Ef9qCKxQSW"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"PBp6v77UpX"}],"key":"txQucho3yl"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import torch\nimport xbatcher\nimport xarray as xr\nimport numpy as np\nimport pytest\n\nfrom functions import _get_output_array_size","key":"H2JWIsl2hL"},{"type":"output","id":"KTf0jbDoPlIXfCscf_Wru","data":[],"key":"AFLkdWs4vj"}],"key":"oIYnvlQzIZ"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Testing the array size function","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zWh9TSIoOG"}],"identifier":"testing-the-array-size-function","label":"Testing the array size function","html_id":"testing-the-array-size-function","implicit":true,"key":"EgZKWKIPzy"}],"key":"eRien1Hkd6"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%writefile test_get_array_size.py\nimport torch\nimport xbatcher\nimport xarray as xr\nimport numpy as np\nimport pytest\n\nfrom functions import _get_output_array_size","key":"pNadA7Tc1J"},{"type":"output","id":"jSZDsF9cKnukKnClUI9Du","data":[{"output_type":"stream","name":"stdout","text":"Overwriting test_get_array_size.py\n"}],"key":"qtTxAz6LEA"}],"key":"IdfstkLb9R"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%writefile -a test_get_array_size.py\n\n@pytest.fixture\ndef bgen_fixture() -> xbatcher.BatchGenerator:\n    data = xr.DataArray(\n        data=np.random.rand(100, 100, 10),\n        dims=(\"x\", \"y\", \"t\"),\n        coords={\n            \"x\": np.arange(100),\n            \"y\": np.arange(100),\n            \"t\": np.arange(10),\n        }\n    )\n    \n    bgen = xbatcher.BatchGenerator(\n        data,\n        input_dims=dict(x=10, y=10),\n        input_overlap=dict(x=5, y=5),\n    )\n    return bgen\n\n@pytest.mark.parametrize(\n    \"case_description, output_tensor_dim, new_dim, resample_dim, expected_output\",\n    [\n        (\n            \"Resampling only: Downsample x, Upsample y\",\n            {'x': 5, 'y': 20},  \n            [],\n            ['x', 'y'],\n            {'x': 50, 'y': 200} \n        ),\n        (\n            \"New dimensions only: Add a 'channel' dimension\",\n            {'channel': 3},\n            ['channel'],\n            [],\n            {'channel': 3}\n        ),\n        (\n            \"Mixed: Resample x and add new channel dimension\",\n            {'x': 30, 'channel': 12}, \n            ['channel'],\n            ['x'],\n            {'x': 300, 'channel': 12} \n        ),\n        (\n            \"Identity resampling (ratio=1)\",\n            {'x': 10, 'y': 10},\n            [],\n            ['x', 'y'],\n            {'x': 100, 'y': 100} \n        ),\n        (\n            \"Dimension not in batcher is treated as new\",\n            {'t': 5},\n            ['t'],\n            [],\n            {'t': 5}\n        )\n        \n    ]\n)\ndef test_get_output_array_size_scenarios(\n    bgen_fixture,  # The fixture is passed as an argument\n    case_description,\n    output_tensor_dim,\n    new_dim,\n    resample_dim,\n    expected_output\n):\n    \"\"\"\n    Tests various valid scenarios for calculating the output array size.\n    The `case_description` parameter is not used in the code but helps make\n    test results more readable.\n    \"\"\"\n    # The `bgen_fixture` argument is the BatchGenerator instance created by our fixture\n    result = _get_output_array_size(\n        bgen=bgen_fixture,\n        output_tensor_dim=output_tensor_dim,\n        new_dim=new_dim,\n        resample_dim=resample_dim\n    )\n    \n    assert result == expected_output, f\"Failed on case: {case_description}\"","key":"EJH5nGZnI2"},{"type":"output","id":"2ihAXPhKdQElZtdWwqrdN","data":[{"output_type":"stream","name":"stdout","text":"Appending to test_get_array_size.py\n"}],"key":"jGqVUHevYv"}],"key":"BCVS68Mc45"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%writefile -a test_get_array_size.py\n\ndef test_get_output_array_size_raises_assertion_error_on_non_integer_size():\n    \"\"\"\n    Tests that the function raises an AssertionError when the resampling\n    calculation results in a non-integer output dimension size.\n    \"\"\"\n    # DataArray size for 'x' is 101.\n    data_for_error = xr.DataArray(\n        data=np.random.rand(101, 100, 10),\n        dims=(\"x\", \"y\", \"t\")\n    )\n    \n    bgen = xbatcher.BatchGenerator(data_for_error, input_dims={'x': 10})\n    \n    # The resampling logic will be: 101 * (5 / 10) = 50.5, which is not an integer.\n    output_tensor_dim = {'x': 5}\n    \n    with pytest.raises(AssertionError):\n        _get_output_array_size(\n            bgen=bgen,\n            output_tensor_dim=output_tensor_dim,\n            new_dim=[],\n            resample_dim=['x']\n        )","key":"m9Min3zhym"},{"type":"output","id":"6Tay_-5FJi1NMWO2L6fXk","data":[{"output_type":"stream","name":"stdout","text":"Appending to test_get_array_size.py\n"}],"key":"u1TkA9Fkk0"}],"key":"mLX54jjwlE"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"!pytest -v","key":"YL3WQ0NL5H"},{"type":"output","id":"L1UM9aU1LQNwYM9aPbTld","data":[{"output_type":"stream","name":"stdout","text":"\u001b[1m============================= test session starts ==============================\u001b[0m\r\nplatform linux -- Python 3.13.5, pytest-8.4.1, pluggy-1.6.0 -- /home/runner/micromamba/envs/cookbook-dev/bin/python3.13\r\ncachedir: .pytest_cache\r\nrootdir: /home/runner/work/xbatcher-deep-learning/xbatcher-deep-learning/notebooks\r\nplugins: anyio-4.10.0\r\n\u001b[1mcollecting ... \u001b[0m"},{"output_type":"stream","name":"stdout","text":"\u001b[1m\rcollecting 6 items                                                             \u001b[0m\u001b[1m\rcollected 6 items                                                              \u001b[0m\r\n\r\ntest_get_array_size.py::test_get_output_array_size_scenarios[Resampling only: Downsample x, Upsample y-output_tensor_dim0-new_dim0-resample_dim0-expected_output0] \u001b[32mPASSED\u001b[0m\u001b[32m [ 16%]\u001b[0m\r\ntest_get_array_size.py::test_get_output_array_size_scenarios[New dimensions only: Add a 'channel' dimension-output_tensor_dim1-new_dim1-resample_dim1-expected_output1] \u001b[32mPASSED\u001b[0m\u001b[32m [ 33%]\u001b[0m\r\ntest_get_array_size.py::test_get_output_array_size_scenarios[Mixed: Resample x and add new channel dimension-output_tensor_dim2-new_dim2-resample_dim2-expected_output2] \u001b[32mPASSED\u001b[0m\u001b[32m [ 50%]\u001b[0m\r\ntest_get_array_size.py::test_get_output_array_size_scenarios[Identity resampling (ratio=1)-output_tensor_dim3-new_dim3-resample_dim3-expected_output3] \u001b[32mPASSED\u001b[0m\u001b[32m [ 66%]\u001b[0m\r\ntest_get_array_size.py::test_get_output_array_size_scenarios[Dimension not in batcher is treated as new-output_tensor_dim4-new_dim4-resample_dim4-expected_output4] \u001b[32mPASSED\u001b[0m\u001b[32m [ 83%]\u001b[0m\r\ntest_get_array_size.py::test_get_output_array_size_raises_assertion_error_on_non_integer_size \u001b[32mPASSED\u001b[0m\u001b[32m [100%]\u001b[0m\r\n\r\n\u001b[32m============================== \u001b[32m\u001b[1m6 passed\u001b[0m\u001b[32m in 1.48s\u001b[0m\u001b[32m ===============================\u001b[0m\r\n"}],"key":"YkYZhMbvUB"}],"key":"ochReDMSNP"}],"key":"Gb0IUEfeRE"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"How to Cite This Cookbook","url":"/notebooks/how-to-cite","group":"Preamble"}}},"domain":"http://localhost:3000"}