{"version":2,"kind":"Notebook","sha256":"1aeea597b1aa61e6b1659b7a0708f311ae46cac815339c297b7a87d388ac5291","slug":"notebooks.inference-testing","location":"/notebooks/inference-testing.ipynb","dependencies":[],"frontmatter":{"title":"Infer model on array","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"cookbook-dev","language":"python"},"authors":[{"nameParsed":{"literal":"Keenan Ganz, Nabin Kalauni, and The Project Pythia Community","given":"and The Project Pythia Community","family":"Keenan Ganz","suffix":"Nabin Kalauni"},"name":"Keenan Ganz, Nabin Kalauni, and The Project Pythia Community","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/projectpythia/xbatcher-deep-learning","copyright":"2025","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/xbatcher-deep-learning/blob/main/notebooks/inference-testing.ipynb","exports":[{"format":"ipynb","filename":"inference-testing.ipynb","url":"/xbatcher-deep-learning/build/inference-testing-9bbcf2da6f9487958d75afded3f08e7c.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GEuCSRubxN"}],"key":"f2SR3kqqak"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rq7YwveCKh"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"LitrMzlqVZ"}],"key":"KTlfB1EcTn"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import torch\nimport xbatcher\nimport xarray as xr\nimport numpy as np\nimport pytest\n\nfrom functions import _get_output_array_size, predict_on_array","key":"fvFMNPc4Wy"},{"type":"output","id":"Oy4R_0yiyP6XDmtfhwUKE","data":[],"key":"oKzOh1vNoo"}],"key":"dYIBnPcIQ4"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Testing the array size function","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"uGII1aqXrz"}],"identifier":"testing-the-array-size-function","label":"Testing the array size function","html_id":"testing-the-array-size-function","implicit":true,"key":"d5sj4cBu4W"}],"key":"Ulx6Gbyzm0"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%writefile test_get_array_size.py\nimport torch\nimport xbatcher\nimport xarray as xr\nimport numpy as np\nimport pytest\n\nfrom functions import _get_output_array_size, _get_resample_factor","key":"acJlaP0kht"},{"type":"output","id":"w7zRWQYiC6bdeWyMtN8wg","data":[{"output_type":"stream","name":"stdout","text":"Overwriting test_get_array_size.py\n"}],"key":"BeQSNr5yVN"}],"key":"nWjhGWTsNs"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%writefile -a test_get_array_size.py\n\n@pytest.fixture\ndef bgen_fixture() -> xbatcher.BatchGenerator:\n    data = xr.DataArray(\n        data=np.random.rand(100, 100, 10),\n        dims=(\"x\", \"y\", \"t\"),\n        coords={\n            \"x\": np.arange(100),\n            \"y\": np.arange(100),\n            \"t\": np.arange(10),\n        }\n    )\n    \n    bgen = xbatcher.BatchGenerator(\n        data,\n        input_dims=dict(x=10, y=10),\n        input_overlap=dict(x=5, y=5),\n    )\n    return bgen\n\n@pytest.mark.parametrize(\n    \"case_description, output_tensor_dim, new_dim, core_dim, resample_dim, expected_output\",\n    [\n        (\n            \"Resampling only: Downsample x, Upsample y\",\n            {'x': 5, 'y': 20},  \n            [],\n            [],\n            ['x', 'y'],\n            {'x': 50, 'y': 200} \n        ),\n        (\n            \"New dimensions only: Add a 'channel' dimension\",\n            {'channel': 3},\n            ['channel'],\n            [],\n            [],\n            {'channel': 3}\n        ),\n        (\n            \"Mixed: Resample x, add new channel dimension and keep t as core\",\n            {'x': 30, 'channel': 12, 't': 10}, \n            ['channel'],\n            ['t'],\n            ['x'],\n            {'x': 300, 'channel': 12, 't': 10} \n        ),\n        (\n            \"Identity resampling (ratio=1)\",\n            {'x': 10, 'y': 10},\n            [],\n            [],\n            ['x', 'y'],\n            {'x': 100, 'y': 100} \n        ),\n        (\n            \"Core dims only: 't' is a core dim\",\n            {'t': 10},\n            [], \n            ['t'], \n            [],\n            {'t': 10}\n        ),\n    ]\n)\ndef test_get_output_array_size_scenarios(\n    bgen_fixture,  # The fixture is passed as an argument\n    case_description,\n    output_tensor_dim,\n    new_dim,\n    core_dim,\n    resample_dim,\n    expected_output\n):\n    \"\"\"\n    Tests various valid scenarios for calculating the output array size.\n    The `case_description` parameter is not used in the code but helps make\n    test results more readable.\n    \"\"\"\n    # The `bgen_fixture` argument is the BatchGenerator instance created by our fixture\n    result = _get_output_array_size(\n        bgen=bgen_fixture,\n        output_tensor_dim=output_tensor_dim,\n        new_dim=new_dim,\n        core_dim=core_dim,\n        resample_dim=resample_dim\n    )\n    \n    assert result == expected_output, f\"Failed on case: {case_description}\"","key":"xO9n88I0jh"},{"type":"output","id":"Ce9ikIUZpQt0ipUdF5nKD","data":[{"output_type":"stream","name":"stdout","text":"Appending to test_get_array_size.py\n"}],"key":"Lu26aH0Cvt"}],"key":"zvun2s87kF"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%writefile -a test_get_array_size.py\n\ndef test_get_output_array_size_raises_error_on_mismatched_core_dim(bgen_fixture):\n    \"\"\"Tests ValueError when a core_dim size doesn't match the source.\"\"\"\n    with pytest.raises(ValueError, match=\"does not equal the source data array size\"):\n        _get_output_array_size(\n            bgen_fixture, output_tensor_dim={'t': 99}, new_dim=[], core_dim=['t'], resample_dim=[]\n        )\n\ndef test_get_output_array_size_raises_error_on_unspecified_dim(bgen_fixture):\n    \"\"\"Tests ValueError when a dimension is not specified in any category.\"\"\"\n    with pytest.raises(ValueError, match=\"must be specified in one of\"):\n        _get_output_array_size(\n            bgen_fixture, output_tensor_dim={'x': 10}, new_dim=[], core_dim=[], resample_dim=[]\n        )\n\ndef test_get_resample_factor_raises_error_on_invalid_ratio(bgen_fixture):\n    \"\"\"Tests AssertionError when the resample ratio is not an integer or its inverse.\"\"\"\n    with pytest.raises(AssertionError, match=\"must be an integer or its inverse\"):\n        # 15 / 10 = 1.5, which is not a valid ratio\n        _get_resample_factor(bgen_fixture, output_tensor_dim={'x': 15}, resample_dim=['x'])","key":"ZgZmQViYlI"},{"type":"output","id":"maml-Ss-ZLS4ImhGwfvcJ","data":[{"output_type":"stream","name":"stdout","text":"Appending to test_get_array_size.py\n"}],"key":"wlBQoi1oU6"}],"key":"jp6I9me2dQ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"!pytest -v test_get_array_size.py","key":"bcFPQYC5IC"},{"type":"output","id":"qRzUGkA-Re7VeVIGK_QCJ","data":[{"output_type":"stream","name":"stdout","text":"\u001b[1m============================= test session starts ==============================\u001b[0m\r\nplatform linux -- Python 3.13.5, pytest-8.4.1, pluggy-1.6.0 -- /home/runner/micromamba/envs/cookbook-dev/bin/python3.13\r\ncachedir: .pytest_cache\r\nrootdir: /home/runner/work/xbatcher-deep-learning/xbatcher-deep-learning/notebooks\r\nplugins: anyio-4.10.0\r\n\u001b[1mcollecting ... \u001b[0m"},{"output_type":"stream","name":"stdout","text":"\u001b[1m\rcollecting 8 items                                                             \u001b[0m\u001b[1m\rcollected 8 items                                                              \u001b[0m\r\n\r\ntest_get_array_size.py::test_get_output_array_size_scenarios[Resampling only: Downsample x, Upsample y-output_tensor_dim0-new_dim0-core_dim0-resample_dim0-expected_output0] \u001b[32mPASSED\u001b[0m\u001b[32m [ 12%]\u001b[0m\r\ntest_get_array_size.py::test_get_output_array_size_scenarios[New dimensions only: Add a 'channel' dimension-output_tensor_dim1-new_dim1-core_dim1-resample_dim1-expected_output1] \u001b[32mPASSED\u001b[0m\u001b[32m [ 25%]\u001b[0m\r\ntest_get_array_size.py::test_get_output_array_size_scenarios[Mixed: Resample x, add new channel dimension and keep t as core-output_tensor_dim2-new_dim2-core_dim2-resample_dim2-expected_output2] \u001b[32mPASSED\u001b[0m\u001b[32m [ 37%]\u001b[0m\r\ntest_get_array_size.py::test_get_output_array_size_scenarios[Identity resampling (ratio=1)-output_tensor_dim3-new_dim3-core_dim3-resample_dim3-expected_output3] "},{"output_type":"stream","name":"stdout","text":"\u001b[32mPASSED\u001b[0m\u001b[32m [ 50%]\u001b[0m\r\ntest_get_array_size.py::test_get_output_array_size_scenarios[Core dims only: 't' is a core dim-output_tensor_dim4-new_dim4-core_dim4-resample_dim4-expected_output4] \u001b[32mPASSED\u001b[0m\u001b[32m [ 62%]\u001b[0m\r\ntest_get_array_size.py::test_get_output_array_size_raises_error_on_mismatched_core_dim \u001b[32mPASSED\u001b[0m\u001b[32m [ 75%]\u001b[0m\r\ntest_get_array_size.py::test_get_output_array_size_raises_error_on_unspecified_dim \u001b[32mPASSED\u001b[0m\u001b[32m [ 87%]\u001b[0m\r\ntest_get_array_size.py::test_get_resample_factor_raises_error_on_invalid_ratio \u001b[32mPASSED\u001b[0m\u001b[32m [100%]\u001b[0m\r\n\r\n\u001b[32m============================== \u001b[32m\u001b[1m8 passed\u001b[0m\u001b[32m in 1.89s\u001b[0m\u001b[32m ===============================\u001b[0m\r\n"}],"key":"D4YA6zXIOh"}],"key":"MMZZWUIOQv"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Testing the predict_on_array function","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"joYcu4nArw"}],"identifier":"testing-the-predict-on-array-function","label":"Testing the predict_on_array function","html_id":"testing-the-predict-on-array-function","implicit":true,"key":"aDEtGVOYno"}],"key":"BToIBLobI8"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%writefile test_predict_on_array.py\nimport xarray as xr\nimport numpy as np\nimport torch\nimport xbatcher\nimport pytest\nfrom xbatcher.loaders.torch import MapDataset\n\nfrom functions import _get_output_array_size, _resample_coordinate\nfrom functions import predict_on_array, _get_resample_factor\nfrom dummy_models import Identity, MeanAlongDim, SubsetAlongAxis, ExpandAlongAxis, AddAxis","key":"LS6H7rvVOE"},{"type":"output","id":"sUOdBSgxYHrDfD0T1wrEI","data":[{"output_type":"stream","name":"stdout","text":"Overwriting test_predict_on_array.py\n"}],"key":"Dlkoh977yI"}],"key":"Ee4YPm6HOB"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import xarray as xr\nimport numpy as np\nimport torch\nimport xbatcher\nimport pytest\nfrom xbatcher.loaders.torch import MapDataset\n\nfrom functions import *\nfrom dummy_models import *","key":"Xx5xKX94Uz"},{"type":"output","id":"Jy4rid1riIxOawLx-Pigj","data":[],"key":"iKgCZs3Lha"}],"key":"UumzE45EtJ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"input_tensor = torch.arange(125).reshape((5, 5, 5)).to(torch.float32)\ninput_tensor[0,0,:]","key":"hgEi6aYzsR"},{"type":"output","id":"Ik8Z653vmihNFpXU28G1a","data":[{"output_type":"execute_result","execution_count":8,"metadata":{},"data":{"text/plain":{"content":"tensor([0., 1., 2., 3., 4.])","content_type":"text/plain"}}}],"key":"SqSwyJHIez"}],"key":"mBbuVV8Aif"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"model = ExpandAlongAxis(1, 2)\nmodel(input_tensor).shape","key":"zMwvzpJyCN"},{"type":"output","id":"7hpUWoNQeKH-_rrCsbi-c","data":[{"output_type":"execute_result","execution_count":9,"metadata":{},"data":{"text/plain":{"content":"torch.Size([5, 10, 5])","content_type":"text/plain"}}}],"key":"HU06MCd4si"}],"key":"rQDhfb6EYq"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%writefile -a test_predict_on_array.py\n\n@pytest.fixture\ndef map_dataset_fixture() -> MapDataset:\n    data = xr.DataArray(\n        data=np.arange(20 * 10).reshape(20, 10).astype(np.float32),\n        dims=(\"x\", \"y\"),\n        coords={\"x\": np.arange(20, dtype=float), \"y\": np.arange(10, dtype=float)},\n    )\n    bgen = xbatcher.BatchGenerator(data, input_dims=dict(x=10, y=5), input_overlap=dict(x=2, y=2))\n    return MapDataset(bgen)\n","key":"lX3gc33xak"},{"type":"output","id":"2jeZqmnWejpZpmlbbtB5c","data":[{"output_type":"stream","name":"stdout","text":"Appending to test_predict_on_array.py\n"}],"key":"RH0qajxvP5"}],"key":"jJsitI1E1w"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"data = xr.DataArray(\n    data=np.arange(20 * 10).reshape(20, 10),\n    dims=(\"x\", \"y\"),\n    coords={\"x\": np.arange(20), \"y\": np.arange(10)}\n).astype(float)\n\nbgen = xbatcher.BatchGenerator(\n    data,\n    input_dims=dict(x=10, y=5),\n    input_overlap=dict(x=2, y=2)\n)","key":"F0lhMQAShd"},{"type":"output","id":"Rf-uZkORLrwLcqJ7nI4iF","data":[],"key":"ZhbyF1J8eM"}],"key":"LHebx7PZqo"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ds = MapDataset(bgen)","key":"Sgvn77dkXn"},{"type":"output","id":"4pY1zCfkZlNIilEpG4RgH","data":[],"key":"VuLxNGqFCo"}],"key":"mtSWCM4uWv"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"data","key":"uELhKcDFYR"},{"type":"output","id":"Dz8CHaXpEBDmuFWKO6RTm","data":[{"output_type":"execute_result","execution_count":13,"metadata":{},"data":{"text/plain":{"content":"<xarray.DataArray (x: 20, y: 10)> Size: 2kB\narray([[  0.,   1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.],\n       [ 10.,  11.,  12.,  13.,  14.,  15.,  16.,  17.,  18.,  19.],\n       [ 20.,  21.,  22.,  23.,  24.,  25.,  26.,  27.,  28.,  29.],\n       [ 30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,  38.,  39.],\n       [ 40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,  49.],\n       [ 50.,  51.,  52.,  53.,  54.,  55.,  56.,  57.,  58.,  59.],\n       [ 60.,  61.,  62.,  63.,  64.,  65.,  66.,  67.,  68.,  69.],\n       [ 70.,  71.,  72.,  73.,  74.,  75.,  76.,  77.,  78.,  79.],\n       [ 80.,  81.,  82.,  83.,  84.,  85.,  86.,  87.,  88.,  89.],\n       [ 90.,  91.,  92.,  93.,  94.,  95.,  96.,  97.,  98.,  99.],\n       [100., 101., 102., 103., 104., 105., 106., 107., 108., 109.],\n       [110., 111., 112., 113., 114., 115., 116., 117., 118., 119.],\n       [120., 121., 122., 123., 124., 125., 126., 127., 128., 129.],\n       [130., 131., 132., 133., 134., 135., 136., 137., 138., 139.],\n       [140., 141., 142., 143., 144., 145., 146., 147., 148., 149.],\n       [150., 151., 152., 153., 154., 155., 156., 157., 158., 159.],\n       [160., 161., 162., 163., 164., 165., 166., 167., 168., 169.],\n       [170., 171., 172., 173., 174., 175., 176., 177., 178., 179.],\n       [180., 181., 182., 183., 184., 185., 186., 187., 188., 189.],\n       [190., 191., 192., 193., 194., 195., 196., 197., 198., 199.]])\nCoordinates:\n  * x        (x) int64 160B 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\n  * y        (y) int64 80B 0 1 2 3 4 5 6 7 8 9","content_type":"text/plain"},"text/html":{"content":"<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n<defs>\n<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n</symbol>\n<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n</symbol>\n</defs>\n</svg>\n<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(\n    --jp-content-font-color0,\n    var(--pst-color-text-base rgba(0, 0, 0, 1))\n  );\n  --xr-font-color2: var(\n    --jp-content-font-color2,\n    var(--pst-color-text-base, rgba(0, 0, 0, 0.54))\n  );\n  --xr-font-color3: var(\n    --jp-content-font-color3,\n    var(--pst-color-text-base, rgba(0, 0, 0, 0.38))\n  );\n  --xr-border-color: var(\n    --jp-border-color2,\n    hsl(from var(--pst-color-on-background, white) h s calc(l - 10))\n  );\n  --xr-disabled-color: var(\n    --jp-layout-color3,\n    hsl(from var(--pst-color-on-background, white) h s calc(l - 40))\n  );\n  --xr-background-color: var(\n    --jp-layout-color0,\n    var(--pst-color-on-background, white)\n  );\n  --xr-background-color-row-even: var(\n    --jp-layout-color1,\n    hsl(from var(--pst-color-on-background, white) h s calc(l - 5))\n  );\n  --xr-background-color-row-odd: var(\n    --jp-layout-color2,\n    hsl(from var(--pst-color-on-background, white) h s calc(l - 15))\n  );\n}\n\nhtml[theme=\"dark\"],\nhtml[data-theme=\"dark\"],\nbody[data-theme=\"dark\"],\nbody.vscode-dark {\n  --xr-font-color0: var(\n    --jp-content-font-color0,\n    var(--pst-color-text-base, rgba(255, 255, 255, 1))\n  );\n  --xr-font-color2: var(\n    --jp-content-font-color2,\n    var(--pst-color-text-base, rgba(255, 255, 255, 0.54))\n  );\n  --xr-font-color3: var(\n    --jp-content-font-color3,\n    var(--pst-color-text-base, rgba(255, 255, 255, 0.38))\n  );\n  --xr-border-color: var(\n    --jp-border-color2,\n    hsl(from var(--pst-color-on-background, #111111) h s calc(l + 10))\n  );\n  --xr-disabled-color: var(\n    --jp-layout-color3,\n    hsl(from var(--pst-color-on-background, #111111) h s calc(l + 40))\n  );\n  --xr-background-color: var(\n    --jp-layout-color0,\n    var(--pst-color-on-background, #111111)\n  );\n  --xr-background-color-row-even: var(\n    --jp-layout-color1,\n    hsl(from var(--pst-color-on-background, #111111) h s calc(l + 5))\n  );\n  --xr-background-color-row-odd: var(\n    --jp-layout-color2,\n    hsl(from var(--pst-color-on-background, #111111) h s calc(l + 15))\n  );\n}\n\n.xr-wrap {\n  display: block !important;\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-text-repr-fallback {\n  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n  display: none;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 0 20px 0 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: inline-block;\n  opacity: 0;\n  height: 0;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n  border: 2px solid transparent !important;\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:focus + label {\n  border: 2px solid var(--xr-font-color0) !important;\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: \"►\";\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: \"▼\";\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: \"(\";\n}\n\n.xr-dim-list:after {\n  content: \")\";\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: \",\";\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  border-color: var(--xr-background-color-row-odd);\n  margin-bottom: 0;\n  padding-top: 2px;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n  border-color: var(--xr-background-color-row-even);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-index-preview {\n  grid-column: 2 / 5;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data,\n.xr-index-data {\n  display: none;\n  border-top: 2px dotted var(--xr-background-color);\n  padding-bottom: 20px !important;\n  padding-top: 10px !important;\n}\n\n.xr-var-attrs-in + label,\n.xr-var-data-in + label,\n.xr-index-data-in + label {\n  padding: 0 1px;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data,\n.xr-index-data-in:checked ~ .xr-index-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-data > pre,\n.xr-index-data > pre,\n.xr-var-data > table > tbody > tr {\n  background-color: transparent !important;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-index-name div,\n.xr-index-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data,\n.xr-index-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt,\n.xr-attrs dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2,\n.xr-no-icon {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\n\n.xr-var-attrs-in:checked + label > .xr-icon-file-text2,\n.xr-var-data-in:checked + label > .xr-icon-database,\n.xr-index-data-in:checked + label > .xr-icon-database {\n  color: var(--xr-font-color0);\n  filter: drop-shadow(1px 1px 5px var(--xr-font-color2));\n  stroke-width: 0.8px;\n}\n</style><pre class='xr-text-repr-fallback'>&lt;xarray.DataArray (x: 20, y: 10)&gt; Size: 2kB\narray([[  0.,   1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.],\n       [ 10.,  11.,  12.,  13.,  14.,  15.,  16.,  17.,  18.,  19.],\n       [ 20.,  21.,  22.,  23.,  24.,  25.,  26.,  27.,  28.,  29.],\n       [ 30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,  38.,  39.],\n       [ 40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,  49.],\n       [ 50.,  51.,  52.,  53.,  54.,  55.,  56.,  57.,  58.,  59.],\n       [ 60.,  61.,  62.,  63.,  64.,  65.,  66.,  67.,  68.,  69.],\n       [ 70.,  71.,  72.,  73.,  74.,  75.,  76.,  77.,  78.,  79.],\n       [ 80.,  81.,  82.,  83.,  84.,  85.,  86.,  87.,  88.,  89.],\n       [ 90.,  91.,  92.,  93.,  94.,  95.,  96.,  97.,  98.,  99.],\n       [100., 101., 102., 103., 104., 105., 106., 107., 108., 109.],\n       [110., 111., 112., 113., 114., 115., 116., 117., 118., 119.],\n       [120., 121., 122., 123., 124., 125., 126., 127., 128., 129.],\n       [130., 131., 132., 133., 134., 135., 136., 137., 138., 139.],\n       [140., 141., 142., 143., 144., 145., 146., 147., 148., 149.],\n       [150., 151., 152., 153., 154., 155., 156., 157., 158., 159.],\n       [160., 161., 162., 163., 164., 165., 166., 167., 168., 169.],\n       [170., 171., 172., 173., 174., 175., 176., 177., 178., 179.],\n       [180., 181., 182., 183., 184., 185., 186., 187., 188., 189.],\n       [190., 191., 192., 193., 194., 195., 196., 197., 198., 199.]])\nCoordinates:\n  * x        (x) int64 160B 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\n  * y        (y) int64 80B 0 1 2 3 4 5 6 7 8 9</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.DataArray</div><div class='xr-array-name'></div><ul class='xr-dim-list'><li><span class='xr-has-index'>x</span>: 20</li><li><span class='xr-has-index'>y</span>: 10</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-a82f56a8-f4d8-40ce-a7f1-9a833e11e516' class='xr-array-in' type='checkbox' checked><label for='section-a82f56a8-f4d8-40ce-a7f1-9a833e11e516' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>0.0 1.0 2.0 3.0 4.0 5.0 6.0 ... 194.0 195.0 196.0 197.0 198.0 199.0</span></div><div class='xr-array-data'><pre>array([[  0.,   1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.],\n       [ 10.,  11.,  12.,  13.,  14.,  15.,  16.,  17.,  18.,  19.],\n       [ 20.,  21.,  22.,  23.,  24.,  25.,  26.,  27.,  28.,  29.],\n       [ 30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,  38.,  39.],\n       [ 40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,  49.],\n       [ 50.,  51.,  52.,  53.,  54.,  55.,  56.,  57.,  58.,  59.],\n       [ 60.,  61.,  62.,  63.,  64.,  65.,  66.,  67.,  68.,  69.],\n       [ 70.,  71.,  72.,  73.,  74.,  75.,  76.,  77.,  78.,  79.],\n       [ 80.,  81.,  82.,  83.,  84.,  85.,  86.,  87.,  88.,  89.],\n       [ 90.,  91.,  92.,  93.,  94.,  95.,  96.,  97.,  98.,  99.],\n       [100., 101., 102., 103., 104., 105., 106., 107., 108., 109.],\n       [110., 111., 112., 113., 114., 115., 116., 117., 118., 119.],\n       [120., 121., 122., 123., 124., 125., 126., 127., 128., 129.],\n       [130., 131., 132., 133., 134., 135., 136., 137., 138., 139.],\n       [140., 141., 142., 143., 144., 145., 146., 147., 148., 149.],\n       [150., 151., 152., 153., 154., 155., 156., 157., 158., 159.],\n       [160., 161., 162., 163., 164., 165., 166., 167., 168., 169.],\n       [170., 171., 172., 173., 174., 175., 176., 177., 178., 179.],\n       [180., 181., 182., 183., 184., 185., 186., 187., 188., 189.],\n       [190., 191., 192., 193., 194., 195., 196., 197., 198., 199.]])</pre></div></div></li><li class='xr-section-item'><input id='section-f675195d-ba8b-4a47-be2b-90b8b0d43a00' class='xr-section-summary-in' type='checkbox'  checked><label for='section-f675195d-ba8b-4a47-be2b-90b8b0d43a00' class='xr-section-summary' >Coordinates: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>x</span></div><div class='xr-var-dims'>(x)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>0 1 2 3 4 5 6 ... 14 15 16 17 18 19</div><input id='attrs-0338fd92-e5de-46b9-ab7c-784e8fdd4f71' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-0338fd92-e5de-46b9-ab7c-784e8fdd4f71' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-87519569-a9b5-4aca-8237-ef9f30cec5b0' class='xr-var-data-in' type='checkbox'><label for='data-87519569-a9b5-4aca-8237-ef9f30cec5b0' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n       18, 19])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>y</span></div><div class='xr-var-dims'>(y)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>0 1 2 3 4 5 6 7 8 9</div><input id='attrs-d9faa073-3f2a-4fc3-96c0-87a15a137966' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-d9faa073-3f2a-4fc3-96c0-87a15a137966' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-df1b1e3a-0d88-4bee-b263-aea8b0b260d0' class='xr-var-data-in' type='checkbox'><label for='data-df1b1e3a-0d88-4bee-b263-aea8b0b260d0' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-f947e96c-df5a-470c-a866-f99b3b155c2b' class='xr-section-summary-in' type='checkbox'  ><label for='section-f947e96c-df5a-470c-a866-f99b3b155c2b' class='xr-section-summary' >Indexes: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>x</div></div><div class='xr-index-preview'>PandasIndex</div><input type='checkbox' disabled/><label></label><input id='index-50e26609-b2d1-4316-a165-917a46f2db29' class='xr-index-data-in' type='checkbox'/><label for='index-50e26609-b2d1-4316-a165-917a46f2db29' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], dtype=&#x27;int64&#x27;, name=&#x27;x&#x27;))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>y</div></div><div class='xr-index-preview'>PandasIndex</div><input type='checkbox' disabled/><label></label><input id='index-d1a0f2d1-78bc-4b88-8f20-0f64ddbc1ed0' class='xr-index-data-in' type='checkbox'/><label for='index-d1a0f2d1-78bc-4b88-8f20-0f64ddbc1ed0' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=&#x27;int64&#x27;, name=&#x27;y&#x27;))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-22c8fd54-3e5c-40df-b94c-48e2b35c9ef0' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-22c8fd54-3e5c-40df-b94c-48e2b35c9ef0' class='xr-section-summary'  title='Expand/collapse section'>Attributes: <span>(0)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'></dl></div></li></ul></div></div>","content_type":"text/html"}}}],"key":"OI6VeYoUDu"}],"key":"WnB99IHlwS"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ds[1]","key":"jDOmnHdfay"},{"type":"output","id":"WKguVJzcpXk7RKGZInX6Y","data":[{"output_type":"execute_result","execution_count":14,"metadata":{},"data":{"text/plain":{"content":"tensor([[ 3.,  4.,  5.,  6.,  7.],\n        [13., 14., 15., 16., 17.],\n        [23., 24., 25., 26., 27.],\n        [33., 34., 35., 36., 37.],\n        [43., 44., 45., 46., 47.],\n        [53., 54., 55., 56., 57.],\n        [63., 64., 65., 66., 67.],\n        [73., 74., 75., 76., 77.],\n        [83., 84., 85., 86., 87.],\n        [93., 94., 95., 96., 97.]], dtype=torch.float64)","content_type":"text/plain"}}}],"key":"UEujXpiZlD"}],"key":"sYGJhgnunL"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"output_tensor_dim = {'x': 20, 'y': 5}\nresample_dim = ['x', 'y']\ncore_dim = []\nnew_dim = []","key":"c4Cgn0pnZE"},{"type":"output","id":"ACAnfdpcRB7DK1h2kE2uZ","data":[],"key":"LzLqUdYCxB"}],"key":"mfZIxoIl2m"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ds[0].shape","key":"GLpkTqniPA"},{"type":"output","id":"Cep-deTIGQwZFf5NuKnaX","data":[{"output_type":"execute_result","execution_count":16,"metadata":{},"data":{"text/plain":{"content":"torch.Size([10, 5])","content_type":"text/plain"}}}],"key":"Ja5NmWgt4u"}],"key":"lvX6EvgAdP"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"model(ds[0]).shape","key":"M5neQlMIpM"},{"type":"output","id":"QUPdzAtzBXjbkSlrqizcM","data":[{"output_type":"execute_result","execution_count":17,"metadata":{},"data":{"text/plain":{"content":"torch.Size([10, 10])","content_type":"text/plain"}}}],"key":"i13vEKrprG"}],"key":"DBj0TTA7Hf"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import functions\nfrom importlib import reload\nreload(functions)\nresult = functions.predict_on_array(\n    ds,\n    model,\n    output_tensor_dim=output_tensor_dim,\n    new_dim=new_dim,\n    core_dim=core_dim,\n    resample_dim=resample_dim,\n    batch_size=4\n)","key":"rrhU5VspT5"},{"type":"output","id":"DOb68TZa_7Eg4VqFMUFMg","data":[{"output_type":"stream","name":"stderr","text":"\r  0%|          | 0/1 [00:00<?, ?it/s]"},{"output_type":"stream","name":"stderr","text":"\r100%|██████████| 1/1 [00:00<00:00, 203.64it/s]"},{"output_type":"stream","name":"stderr","text":"\n"}],"key":"J7UQxmH3yM"}],"key":"quMpW8OjNi"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%writefile -a test_predict_on_array.py\n\n@pytest.mark.parametrize(\"factor, mode, expected\", [\n    (2.0, \"edges\", np.arange(0, 10, 0.5)),\n    (0.5, \"edges\", np.arange(0, 10, 2.0)),\n])\ndef test_resample_coordinate(factor, mode, expected):\n    coord = xr.DataArray(np.arange(10, dtype=float), dims=\"x\")\n    resampled = _resample_coordinate(coord, factor, mode)\n    np.testing.assert_allclose(resampled, expected)","key":"p3FjFpg4Z5"},{"type":"output","id":"JGWekrPcuteMBRNWshq3G","data":[{"output_type":"stream","name":"stdout","text":"Appending to test_predict_on_array.py\n"}],"key":"Lugd3NcWEr"}],"key":"fcKf6xwALh"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%writefile -a test_predict_on_array.py\n\n@pytest.mark.parametrize(\n    \"model, output_tensor_dim, new_dim, core_dim, resample_dim, manual_transform\",\n    [\n        # Case 1: Identity - No change\n        (\n            Identity(),\n            {'x': 10, 'y': 5},\n            [], [], ['x', 'y'],\n            lambda da: da.data\n        ),\n        # Case 2: ExpandAlongAxis - Upsampling\n        (\n            ExpandAlongAxis(ax=1, n_repeats=2), # ax=1 is 'x'\n            {'x': 20, 'y': 5},\n            [], [], ['x', 'y'],\n            lambda da: da.data.repeat(2, axis=0) # axis=0 in the 2D numpy array\n        ),\n        # Case 3: SubsetAlongAxis - Coarsening\n        (\n            SubsetAlongAxis(ax=1, n=5), # ax=1 is 'x'\n            {'x': 5, 'y': 5},\n            [], [], ['x', 'y'],\n            lambda da: da.isel(x=slice(0, 5)).data\n        ),\n        # Case 4: MeanAlongDim - Dimension reduction\n        (\n            MeanAlongDim(ax=2), # ax=2 is 'y'\n            {'x': 10},\n            [], [], ['x'],\n            lambda da: da.mean(dim='y').data\n        ),\n        # Case 5: AddAxis - Add a new dimension\n        (\n            AddAxis(ax=1), # Add new dim at axis 1\n            {'channel': 1, 'x': 10, 'y': 5},\n            ['channel'], [], ['x', 'y'],\n            lambda da: np.expand_dims(da.data, axis=0)\n        ),\n    ]\n)\ndef test_predict_on_array_all_models(\n    map_dataset_fixture, model, output_tensor_dim, new_dim, core_dim, resample_dim, manual_transform\n):\n    \"\"\"\n    Tests reassembly, averaging, and coordinate assignment using a variety of models.\n    \"\"\"\n    dataset = map_dataset_fixture\n    bgen = dataset.X_generator\n    resample_factor = _get_resample_factor(bgen, output_tensor_dim, resample_dim)\n\n    # --- Run the function under test ---\n    result_da = predict_on_array(\n        dataset=dataset, model=model, output_tensor_dim=output_tensor_dim,\n        new_dim=new_dim, core_dim=core_dim, resample_dim=resample_dim, batch_size=4\n    )\n\n    # --- Manually calculate the expected result ---\n    expected_size = _get_output_array_size(bgen, output_tensor_dim, new_dim, core_dim, resample_dim)\n    expected_sum = xr.DataArray(np.zeros(list(expected_size.values())), dims=list(expected_size.keys()))\n    expected_count = xr.full_like(expected_sum, 0, dtype=int)\n\n    for i in range(len(dataset)):\n        batch_da = bgen[i]\n        old_indexer = bgen._batch_selectors.selectors[i][0]\n        new_indexer = {}\n        for key in old_indexer:\n            if key in resample_dim:\n                new_indexer[key] = slice(int(old_indexer[key].start * resample_factor.get(key, 1)), int(old_indexer[key].stop * resample_factor.get(key, 1)))\n            elif key in core_dim:\n                new_indexer[key] = old_indexer[key]\n\n        model_output_on_batch = manual_transform(batch_da)\n        print(f\"Batch {i}: {new_indexer} -> {model_output_on_batch.shape}\")\n        print(f\"Expected sum shape: {expected_sum.loc[new_indexer].shape}\")\n        expected_sum.loc[new_indexer] += model_output_on_batch\n        expected_count.loc[new_indexer] += 1\n        \n    expected_avg_data = expected_sum.data / expected_count.data\n    \n    # --- Assert correctness ---\n    np.testing.assert_allclose(result_da.values, expected_avg_data, equal_nan=True)","key":"mnpwhwidn1"},{"type":"output","id":"q_vUZuFJANaL2uI9_hgWx","data":[{"output_type":"stream","name":"stdout","text":"Appending to test_predict_on_array.py\n"}],"key":"BHlFRAwix2"}],"key":"h5abRx6Uqf"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"!pytest -v test_predict_on_array.py","key":"B3Qaf0qHof"},{"type":"output","id":"fq_b-OrDmJrWKogFjXXBv","data":[{"output_type":"stream","name":"stdout","text":"\u001b[1m============================= test session starts ==============================\u001b[0m\r\nplatform linux -- Python 3.13.5, pytest-8.4.1, pluggy-1.6.0 -- /home/runner/micromamba/envs/cookbook-dev/bin/python3.13\r\ncachedir: .pytest_cache\r\nrootdir: /home/runner/work/xbatcher-deep-learning/xbatcher-deep-learning/notebooks\r\nplugins: anyio-4.10.0\r\n\u001b[1mcollecting ... \u001b[0m"},{"output_type":"stream","name":"stdout","text":"\u001b[1m\rcollecting 7 items                                                             \u001b[0m\u001b[1m\rcollected 7 items                                                              \u001b[0m\r\n\r\ntest_predict_on_array.py::test_resample_coordinate[2.0-edges-expected0] \u001b[32mPASSED\u001b[0m\u001b[32m [ 14%]\u001b[0m\r\ntest_predict_on_array.py::test_resample_coordinate[0.5-edges-expected1] \u001b[32mPASSED\u001b[0m\u001b[32m [ 28%]\u001b[0m\r\ntest_predict_on_array.py::test_predict_on_array_all_models[model0-output_tensor_dim0-new_dim0-core_dim0-resample_dim0-<lambda>] \u001b[32mPASSED\u001b[0m\u001b[32m [ 42%]\u001b[0m\r\ntest_predict_on_array.py::test_predict_on_array_all_models[model1-output_tensor_dim1-new_dim1-core_dim1-resample_dim1-<lambda>] "},{"output_type":"stream","name":"stdout","text":"\u001b[32mPASSED\u001b[0m\u001b[33m [ 57%]\u001b[0m\r\ntest_predict_on_array.py::test_predict_on_array_all_models[model2-output_tensor_dim2-new_dim2-core_dim2-resample_dim2-<lambda>] \u001b[32mPASSED\u001b[0m\u001b[33m [ 71%]\u001b[0m\r\ntest_predict_on_array.py::test_predict_on_array_all_models[model3-output_tensor_dim3-new_dim3-core_dim3-resample_dim3-<lambda>] \u001b[32mPASSED\u001b[0m\u001b[33m [ 85%]\u001b[0m\r\ntest_predict_on_array.py::test_predict_on_array_all_models[model4-output_tensor_dim4-new_dim4-core_dim4-resample_dim4-<lambda>] \u001b[32mPASSED\u001b[0m\u001b[33m [100%]\u001b[0m"},{"output_type":"stream","name":"stdout","text":"\r\n\r\n\u001b[33m=============================== warnings summary ===============================\u001b[0m\r\ntest_predict_on_array.py::test_predict_on_array_all_models[model0-output_tensor_dim0-new_dim0-core_dim0-resample_dim0-<lambda>]\r\ntest_predict_on_array.py::test_predict_on_array_all_models[model1-output_tensor_dim1-new_dim1-core_dim1-resample_dim1-<lambda>]\r\ntest_predict_on_array.py::test_predict_on_array_all_models[model2-output_tensor_dim2-new_dim2-core_dim2-resample_dim2-<lambda>]\r\ntest_predict_on_array.py::test_predict_on_array_all_models[model3-output_tensor_dim3-new_dim3-core_dim3-resample_dim3-<lambda>]\r\ntest_predict_on_array.py::test_predict_on_array_all_models[model4-output_tensor_dim4-new_dim4-core_dim4-resample_dim4-<lambda>]\r\n  /home/runner/work/xbatcher-deep-learning/xbatcher-deep-learning/notebooks/test_predict_on_array.py:108: RuntimeWarning: invalid value encountered in divide\r\n    expected_avg_data = expected_sum.data / expected_count.data\r\n\r\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\r\n\u001b[33m======================== \u001b[32m7 passed\u001b[0m, \u001b[33m\u001b[1m5 warnings\u001b[0m\u001b[33m in 1.90s\u001b[0m\u001b[33m =========================\u001b[0m\r\n"}],"key":"ReBU6FlXBm"}],"key":"Sw4khyS3CQ"}],"key":"Vel8LDH6Jr"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Reconstructing Xarray Datasets from Model Outputs","url":"/notebooks/xbatcher-reconstruction","group":"Xbatcher fundamentals"},"next":{"title":"Using xbatcher to train an autoencoder","url":"/notebooks/autoencoder","group":"Example with topography data"}}},"domain":"http://localhost:3000"}